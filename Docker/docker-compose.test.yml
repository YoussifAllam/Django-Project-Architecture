version: '3.8'

networks:
  backend:
    driver: bridge

volumes:
  Test_ProjectName_django_db_data: {}
  Test_ProjectName_media_data: {}
  Test_ProjectName_postgres_data: {}
  Test_ProjectName_static_vol: {}
  Test_ProjectName_redis_data: {}

services:

  Test_ProjectName_app_postgres_db:
    image: postgres:13
    env_file:
      - ../ENV/.env.test
    environment:
      ENVIRONMENT: TEST
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - Test_ProjectName_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  django:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: Test_ProjectName_app
    command: uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --reload --reload-include '*.py' --reload-include '*.html'
    restart: always
    volumes:
      - ..:/code
      - Test_ProjectName_media_data:/code/media # Ensure media directory persists in the directory
      - Test_ProjectName_django_db_data:/code/Docker/volumes/db_volume
      - Test_ProjectName_static_vol:/code/staticfiles
    env_file:
      - ../ENV/.env.test
    environment:
      - ENVIRONMENT=TEST
      - DJANGO_SETTINGS_MODULE=config.django
      - PYTHONUNBUFFERED=1  # Better logging
      - PYTHONDONTWRITEBYTECODE=1  # Don't create .pyc files
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - Test_ProjectName_app_postgres_db
      - celery
      - celery-beat
    networks:
      - backend

  redis:
    container_name: Test_ProjectName_redis
    image: redis:latest
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "6379:6379"
    volumes:
      - Test_ProjectName_redis_data:/data
    networks:
      - backend

  celery:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: Test_ProjectName_celery
    command: celery -A config.settings.celery worker -l info
    volumes:
      - ..:/code
      - ./code/db:/code/Docker/volumes/celery_db # Ensure SQLite database file persists in the directory
    env_file:
      - ../ENV/.env.test
    environment:
      - DJANGO_SETTINGS_MODULE=config.django # Specify the settings module
      - ENVIRONMENT=TEST
    depends_on:
      - redis
    networks:
      - backend

  celery-beat:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: Test_ProjectName_celery_beat
    command: celery -A config.settings.celery beat -l info
    volumes:
      - ..:/code
      - ./code/db:/code/Docker/volumes/celery_db # Ensure SQLite database file persists in the directory
    env_file:
      - ../ENV/.env.test
    environment:
      - DJANGO_SETTINGS_MODULE=config.django # Specify the settings module
      - ENVIRONMENT=TEST
    depends_on:
      - redis
    networks:
      - backend

  nginx:
    build: ../nginx/test_nginx
    volumes:
      - Test_ProjectName_static_vol:/code/staticfiles
      - Test_ProjectName_media_data:/code/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
    networks:
      - backend