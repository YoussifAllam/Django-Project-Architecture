# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # any code pushed to any branch will be a trigger
  push:
    branches:
      - '*'
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - develop
      - main

# two job definition
jobs:
  health-check-job:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_RUNTIME_TOKEN }}

      - name: Cache dependency
        uses: actions/cache@v2 
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          
      - name: Check Python version
        run: python --version

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Check Code Quality with flake8
        run: flake8 --exclude=migrations
        
      - name: Load Environment Variables
        run: |
          echo "ENVIRONMENT=LOCAL" >> $GITHUB_ENV
  
  # build_and_push:
  #   name: "Build and Push to Dockerhub"
  #   runs-on: ubuntu-latest
  #   needs:
  #     - health-check-job
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker images
  #       env:
  #         DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #       run: |
  #         echo "Building and pushing images with username: $DOCKERHUB_USERNAME"
  #         docker compose -f $GITHUB_WORKSPACE/Docker/docker-compose.test.yml build
  #         docker compose -f $GITHUB_WORKSPACE/Docker/docker-compose.test.yml push

  deploy_to_ec2:
    name: "Deploy to EC2"
    runs-on: ubuntu-latest
    needs:
      - health-check-job
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "=== Checking Current Space ==="
            df -h
            
            echo "=== Verifying Project Directory ==="
            if [ ! -d "/home/ec2-user/Prezza" ]; then
              echo "Project directory not found!"
              exit 1
            fi
            
            echo "=== Verifying Docker Compose File ==="
            if [ ! -f "/home/ec2-user/Prezza/Docker/docker-compose.test.yml" ]; then
              echo "Docker compose file not found!"
              exit 1
            fi
            
            echo "=== Current Docker Images ==="
            sudo docker images
            
            echo "=== Current Running Containers ==="
            sudo docker ps -a
            
            echo "=== Cleaning Up Docker System ==="
            sudo docker image prune -f --filter "until=24h"
            sudo docker builder prune -f
            sudo docker volume prune -f
            
            echo "=== Starting Deployment ==="
            # Navigate to project directory (adjust this path as needed)
            cd /home/ec2-user/Prezza
            
            # Pull latest code
            git pull origin main
          
            # Stop and remove existing containers
            sudo docker-compose -f Docker/docker-compose.test.yml down
            
            # Start all services
            sudo docker-compose -f Docker/docker-compose.test.yml up -d
            
            echo "=== Deployment Complete ==="
            echo "=== Final Docker Status ==="
            echo "Images:"
            sudo docker images
            echo "Running Containers:"
            sudo docker ps -a
            echo "Disk Space:"
            df -h
